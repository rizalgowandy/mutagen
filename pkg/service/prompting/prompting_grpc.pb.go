// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: service/prompting/prompting.proto

package prompting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Prompting_Host_FullMethodName   = "/prompting.Prompting/Host"
	Prompting_Prompt_FullMethodName = "/prompting.Prompting/Prompt"
)

// PromptingClient is the client API for Prompting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Prompting allows clients to host and request prompting.
type PromptingClient interface {
	// Host allows clients to perform prompt hosting.
	Host(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HostRequest, HostResponse], error)
	// Prompt performs prompting using a specific prompter.
	Prompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error)
}

type promptingClient struct {
	cc grpc.ClientConnInterface
}

func NewPromptingClient(cc grpc.ClientConnInterface) PromptingClient {
	return &promptingClient{cc}
}

func (c *promptingClient) Host(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HostRequest, HostResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prompting_ServiceDesc.Streams[0], Prompting_Host_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HostRequest, HostResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Prompting_HostClient = grpc.BidiStreamingClient[HostRequest, HostResponse]

func (c *promptingClient) Prompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptResponse)
	err := c.cc.Invoke(ctx, Prompting_Prompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromptingServer is the server API for Prompting service.
// All implementations must embed UnimplementedPromptingServer
// for forward compatibility.
//
// Prompting allows clients to host and request prompting.
type PromptingServer interface {
	// Host allows clients to perform prompt hosting.
	Host(grpc.BidiStreamingServer[HostRequest, HostResponse]) error
	// Prompt performs prompting using a specific prompter.
	Prompt(context.Context, *PromptRequest) (*PromptResponse, error)
	mustEmbedUnimplementedPromptingServer()
}

// UnimplementedPromptingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPromptingServer struct{}

func (UnimplementedPromptingServer) Host(grpc.BidiStreamingServer[HostRequest, HostResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Host not implemented")
}
func (UnimplementedPromptingServer) Prompt(context.Context, *PromptRequest) (*PromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prompt not implemented")
}
func (UnimplementedPromptingServer) mustEmbedUnimplementedPromptingServer() {}
func (UnimplementedPromptingServer) testEmbeddedByValue()                   {}

// UnsafePromptingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromptingServer will
// result in compilation errors.
type UnsafePromptingServer interface {
	mustEmbedUnimplementedPromptingServer()
}

func RegisterPromptingServer(s grpc.ServiceRegistrar, srv PromptingServer) {
	// If the following call pancis, it indicates UnimplementedPromptingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Prompting_ServiceDesc, srv)
}

func _Prompting_Host_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PromptingServer).Host(&grpc.GenericServerStream[HostRequest, HostResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Prompting_HostServer = grpc.BidiStreamingServer[HostRequest, HostResponse]

func _Prompting_Prompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromptingServer).Prompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prompting_Prompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromptingServer).Prompt(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Prompting_ServiceDesc is the grpc.ServiceDesc for Prompting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prompting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prompting.Prompting",
	HandlerType: (*PromptingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prompt",
			Handler:    _Prompting_Prompt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Host",
			Handler:       _Prompting_Host_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/prompting/prompting.proto",
}
